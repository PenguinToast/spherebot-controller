{"version":3,"sources":["Controller.tsx","Joystick.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Motor","Joystick","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","divRef","createRef","canvasRef","currentTouch","redraw","canvas","current","ctx","getContext","width","height","clearRect","drawBackground","y","valueToY","props","value","fillStyle","fillRect","beginPath","arc","radius","Math","PI","closePath","fill","stroke","handlePress","clientX","clientY","loc","windowToCanvas","onChange","yToValue","handleResize","div","sizeCanvas","setTimeout","handleMouseEvent","e","handleTouchStart","touch","changedTouches","item","identifier","handleTouchMove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","handleTouchEnd","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","inherits","createClass","key","x","w","h","r","moveTo","arcTo","roundRect","clientWidth","clientHeight","bbox","getBoundingClientRect","left","top","_this2","addEventListener","window","removeEventListener","react_default","a","createElement","resizeSensor","onResize","className","ref","Component","ConnectionState","Controller","_this$state","state","defineProperty","Left","Right","lastSeqNo","lastAck","handleCenterClick","screenfull","enabled","toggle","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","characteristic","startNotifications","ackView","getUint32","writeValue","Uint8Array","from","stop","motor","_this3","_ref","_callee2","seqNo","buffer","view","_context2","setState","ArrayBuffer","DataView","setInt32","setInt8","setFloat32","console","log","abrupt","_x","Joystick_Joystick","getMotorHandler","buttons","icon","large","onClick","SERVICE_UUID","CHARACTERISTIC_UUID","App","connectionState","Disconnected","handleConnectClick","device","server","service","_characteristic","Connecting","navigator","bluetooth","requestDevice","filters","name","services","sent","gatt","connect","getPrimaryService","getCharacteristic","Connected","t0","handleDisconnectClick","_characteristic2","Disconnecting","disconnect","text","intent","Intent","PRIMARY","WARNING","disabled","Controller_Controller","nonIdealState","title","spinner","renderController","navbar","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","renderConnectionButton","renderBody","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.688c5259.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport \"./static/css/controller.css\";\nimport screenfull from \"screenfull\";\n\nimport { Button, Slider } from \"@blueprintjs/core\";\nimport { Joystick } from \"./Joystick\";\n\nexport interface IControllerProps {\n  characteristic: BluetoothRemoteGATTCharacteristic;\n}\n\nenum Motor {\n  Left = 0,\n  Right = 1,\n}\n\ninterface IControllerState {\n  [Motor.Left]: number;\n  [Motor.Right]: number;\n}\n\nexport class Controller extends Component<IControllerProps, IControllerState> {\n  public readonly state: IControllerState = {\n    [Motor.Left]: 0,\n    [Motor.Right]: 0,\n  };\n\n  private divRef = createRef<HTMLDivElement>();\n\n  private lastSeqNo = 0;\n  private lastAck = 0;\n\n  async componentDidMount() {\n    await this.props.characteristic.startNotifications();\n    this.props.characteristic.addEventListener(\"characteristicvaluechanged\", () => {\n      const ackView = this.props.characteristic.value;\n      if (!ackView) {\n        return;\n      }\n      this.lastAck = ackView.getUint32(0, true);\n    });\n    await this.props.characteristic.writeValue(\n      Uint8Array.from([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])\n    );\n  }\n\n  getMotorHandler(motor: Motor) {\n    return async (value: number) => {\n      this.setState({ [motor]: value });\n\n      const lastSeqNo = this.lastSeqNo;\n      const seqNo = lastSeqNo >= (1 << 31) * -2 - 1 ? 0 : lastSeqNo + 1;\n      const buffer = new ArrayBuffer(9);\n      const view = new DataView(buffer);\n      view.setInt32(0, seqNo, true);\n      view.setInt8(4, motor);\n      view.setFloat32(5, value, true);\n\n      console.log(seqNo, this.lastAck);\n      if (this.lastAck != lastSeqNo) {\n        return;\n      }\n      this.lastSeqNo = seqNo;\n      await this.props.characteristic.writeValue(buffer);\n    };\n  }\n\n  handleCenterClick = () => {\n    if (screenfull && screenfull.enabled && this.divRef.current) {\n      screenfull.toggle(this.divRef.current);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"controller\" ref={this.divRef}>\n        <div className=\"slider-container\">\n          <Joystick\n            className=\"slider\"\n            value={this.state[Motor.Left]}\n            onChange={this.getMotorHandler(Motor.Left)}\n          />\n        </div>\n        <div className=\"center-icon-container\">\n          <Button\n            className=\"center-icon\"\n            icon=\"horizontal-distribution\"\n            large\n            onClick={this.handleCenterClick}\n          />\n        </div>\n        <div className=\"slider-container\">\n          <Joystick\n            className=\"slider\"\n            value={this.state[Motor.Right]}\n            onChange={this.getMotorHandler(Motor.Right)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component, createRef } from \"react\";\n\nimport { ResizeSensor } from \"@blueprintjs/core\";\n\nexport interface IJoystickProps {\n  className?: string;\n  value: number;\n  onChange: (newValue: number) => void;\n}\n\nconst WIDTH = 30;\n\nexport class Joystick extends Component<IJoystickProps, {}> {\n  private divRef = createRef<HTMLDivElement>();\n  private canvasRef = createRef<HTMLCanvasElement>();\n\n  private currentTouch: number | null = null;\n\n  private roundRect(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    r: number\n  ) {\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    return ctx;\n  }\n\n  private drawBackground(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    ctx.fillStyle = \"#BFCCD6\";\n    this.roundRect(ctx, 0, 0, width, height, width / 2).fill();\n    this.roundRect(ctx, 0, 0, width, height, width / 2).stroke();\n  }\n\n  private sizeCanvas(canvas: HTMLCanvasElement, div: HTMLDivElement) {\n    canvas.width = div.clientWidth;\n    canvas.height = div.clientHeight;\n  }\n\n  private radius(canvas: HTMLCanvasElement): number {\n    return canvas.width / 2 - 1;\n  }\n\n  private valueToY(canvas: HTMLCanvasElement, value: number): number {\n    const height = canvas.height;\n    return height / 2 + -value * (height / 2 - this.radius(canvas));\n  }\n\n  private yToValue(canvas: HTMLCanvasElement, y: number): number {\n    const height = canvas.height;\n    const value = (height / 2 - y) / (height / 2 - this.radius(canvas));\n    if (value > 1) {\n      return 1;\n    } else if (value < -1) {\n      return -1;\n    }\n    return value;\n  }\n\n  private redraw = () => {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\")!;\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height);\n    this.drawBackground(ctx, width, height);\n\n    // Draw fill\n    const y = this.valueToY(canvas, this.props.value);\n    ctx.fillStyle = \"#3DCC91\";\n    ctx.fillRect(1, height / 2, width - 2, y - height / 2);\n\n    // Draw slider\n    ctx.beginPath();\n    ctx.arc(width / 2, y, this.radius(canvas), 0, 2 * Math.PI);\n    ctx.closePath();\n    ctx.fillStyle = \"#394B59\";\n    ctx.fill();\n    ctx.stroke();\n  };\n\n  private windowToCanvas(canvas: HTMLCanvasElement, x: number, y: number) {\n    const bbox = canvas.getBoundingClientRect();\n\n    return {\n      x: x - bbox.left * (canvas.width / bbox.width),\n      y: y - bbox.top * (canvas.height / bbox.height),\n    };\n  }\n\n  handlePress = (clientX: number, clientY: number) => {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const loc = this.windowToCanvas(canvas, clientX, clientY);\n    this.props.onChange(this.yToValue(canvas, loc.y));\n  };\n\n  handleResize = () => {\n    const canvas = this.canvasRef.current;\n    const div = this.divRef.current;\n    if (!canvas || !div) {\n      return;\n    }\n    this.sizeCanvas(canvas, div);\n    setTimeout(this.redraw, 1);\n  };\n\n  handleMouseEvent = (e: MouseEvent) => {\n    this.handlePress(e.clientX, e.clientY);\n  };\n\n  handleTouchStart = (e: TouchEvent) => {\n    const touch = e.changedTouches.item(0);\n    if (!touch) {\n      return;\n    }\n    this.currentTouch = touch.identifier;\n    this.handlePress(touch.clientX, touch.clientY);\n  };\n\n  handleTouchMove = (e: TouchEvent) => {\n    for (let touch of e.changedTouches) {\n      if (touch.identifier === this.currentTouch) {\n        this.handlePress(touch.clientX, touch.clientY);\n        return;\n      }\n    }\n  };\n\n  handleTouchEnd = (e: TouchEvent) => {\n    for (let touch of e.changedTouches) {\n      if (touch.identifier === this.currentTouch) {\n        this.currentTouch = null;\n        return;\n      }\n    }\n  };\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    canvas.addEventListener(\"mousedown\", e => {\n      this.handleMouseEvent(e);\n      window.addEventListener(\"mousemove\", this.handleMouseEvent);\n      window.addEventListener(\"mouseup\", () => {\n        window.removeEventListener(\"mousemove\", this.handleMouseEvent);\n        window.removeEventListener(\"mouseup\", this.handleMouseEvent);\n      });\n    });\n    canvas.addEventListener(\"touchstart\", this.handleTouchStart);\n    canvas.addEventListener(\"touchmove\", this.handleTouchMove);\n    canvas.addEventListener(\"touchend\", this.handleTouchEnd);\n    this.handleResize();\n  }\n\n  componentDidUpdate() {\n    this.redraw();\n  }\n\n  render() {\n    return (\n      <ResizeSensor onResize={this.handleResize}>\n        <div className={this.props.className} ref={this.divRef}>\n          <canvas ref={this.canvasRef} />\n        </div>\n      </ResizeSensor>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./static/css/app.css\";\nimport {\n  Alignment,\n  Button,\n  Intent,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  NonIdealState,\n  Spinner,\n} from \"@blueprintjs/core\";\nimport { Controller } from \"./Controller\";\n\nenum ConnectionState {\n  Connected,\n  Connecting,\n  Disconnected,\n  Disconnecting,\n}\n\ninterface IAppState {\n  connectionState: ConnectionState;\n  characteristic: BluetoothRemoteGATTCharacteristic | null;\n}\n\nconst SERVICE_UUID = \"0000ffe0-0000-1000-8000-00805f9b34fb\";\nconst CHARACTERISTIC_UUID = \"0000ffe1-0000-1000-8000-00805f9b34fb\";\n\nclass App extends Component<{}, IAppState> {\n  public readonly state: IAppState = {\n    connectionState: ConnectionState.Disconnected,\n    characteristic: null,\n  };\n\n  handleConnectClick = async () => {\n    try {\n      this.setState({ connectionState: ConnectionState.Connecting });\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [\n          {\n            name: \"Spherebot\",\n            services: [SERVICE_UUID],\n          },\n        ],\n      });\n      if (!device.gatt) {\n        return;\n      }\n      const server = await device.gatt.connect();\n      const service = await server.getPrimaryService(SERVICE_UUID);\n      const characteristic = await service.getCharacteristic(CHARACTERISTIC_UUID);\n      await characteristic.startNotifications();\n      await characteristic.writeValue(\n        Uint8Array.from([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])\n      );\n      this.setState({\n        connectionState: ConnectionState.Connected,\n        characteristic,\n      });\n    } catch (err) {\n      console.log(\"Error: \", err);\n      this.setState({\n        connectionState: ConnectionState.Disconnected,\n        characteristic: null,\n      });\n    }\n  };\n\n  handleDisconnectClick = async () => {\n    try {\n      this.setState({\n        connectionState: ConnectionState.Disconnecting,\n      });\n      const characteristic = this.state.characteristic;\n      if (!characteristic) {\n        return;\n      }\n      const service = characteristic.service;\n      if (!service) {\n        return;\n      }\n      const gatt = service.device.gatt;\n      if (!gatt) {\n        return;\n      }\n      await gatt.disconnect();\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n    this.setState({\n      connectionState: ConnectionState.Disconnected,\n      characteristic: null,\n    });\n  };\n\n  renderConnectionButton() {\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <Button text=\"Connect\" intent={Intent.PRIMARY} onClick={this.handleConnectClick} />;\n      case ConnectionState.Connected:\n        return (\n          <Button text=\"Disconnect\" intent={Intent.WARNING} onClick={this.handleDisconnectClick} />\n        );\n      case ConnectionState.Disconnecting:\n        return <Button text=\"Disconnecting\" disabled />;\n      case ConnectionState.Connecting:\n        return <Button text=\"Connecting\" disabled />;\n    }\n  }\n\n  renderController() {\n    const characteristic = this.state.characteristic;\n    if (!characteristic) {\n      return <NonIdealState icon=\"offline\" title=\"Disconnected from Spherebot!\" />;\n    }\n    return <Controller characteristic={characteristic} />;\n  }\n\n  renderBody() {\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <NonIdealState icon=\"offline\" title=\"Please connect to Spherebot\" />;\n      case ConnectionState.Connecting | ConnectionState.Disconnecting:\n        return <NonIdealState className=\"main-spinner\" icon={<Spinner />} title=\"Loading...\" />;\n      case ConnectionState.Connected:\n        return this.renderController();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Navbar>\n          <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Spherebot</NavbarHeading>\n            <NavbarDivider />\n            {this.renderConnectionButton()}\n          </NavbarGroup>\n        </Navbar>\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./static/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}