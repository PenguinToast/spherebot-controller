{"version":3,"sources":["Controller.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Motor","ConnectionState","Controller","_Component","_getPrototypeOf2","_this$state","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","defineProperty","Left","Right","inherits","createClass","key","value","motor","_this2","setState","react_default","a","createElement","className","slider","min","max","stepSize","vertical","onChange","getMotorHandler","icon","iconSize","Component","SERVICE_UUID","CHARACTERISTIC_UUID","App","connectionState","Disconnected","characteristic","handleConnectClick","_callee","device","server","service","_characteristic","regenerator_default","wrap","_context","prev","next","Connecting","navigator","bluetooth","requestDevice","filters","name","services","sent","gatt","abrupt","connect","getPrimaryService","getCharacteristic","Connected","t0","console","log","stop","handleDisconnectClick","_callee2","_characteristic2","_context2","Disconnecting","disconnect","buttons","text","intent","Intent","PRIMARY","onClick","WARNING","disabled","Controller_Controller","nonIdealState","title","navbar","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","renderConnectionButton","renderBody","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6be510ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./static/css/controller.css\";\n\nimport { Icon, Slider } from \"@blueprintjs/core\";\n\nexport interface IControllerProps {\n  characteristic?: BluetoothRemoteGATTCharacteristic;\n}\n\nenum Motor {\n  Left = 0,\n  Right = 1,\n}\n\ninterface IControllerState {\n  [Motor.Left]: number;\n  [Motor.Right]: number;\n}\n\nexport class Controller extends Component<IControllerProps, IControllerState> {\n  public readonly state: IControllerState = {\n    [Motor.Left]: 0,\n    [Motor.Right]: 0,\n  };\n\n  getMotorHandler(motor: Motor) {\n    return (value: number) => this.setState({ [motor]: value });\n  }\n\n  render() {\n    return (\n      <div className=\"controller\">\n        <div className=\"slider-container\">\n          <Slider\n            className=\"slider\"\n            min={-1}\n            max={1}\n            stepSize={0.01}\n            vertical\n            value={this.state[Motor.Left]}\n            onChange={this.getMotorHandler(Motor.Left)}\n          />\n        </div>\n        <div className=\"center-icon-container\">\n          <Icon className=\"center-icon\" icon=\"horizontal-distribution\" iconSize={60} />\n        </div>\n        <div className=\"slider-container\">\n          <Slider\n            className=\"slider\"\n            min={-1}\n            max={1}\n            stepSize={0.01}\n            vertical\n            value={this.state[Motor.Right]}\n            onChange={this.getMotorHandler(Motor.Right)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./static/css/app.css\";\nimport {\n  Alignment,\n  Button,\n  Intent,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  NonIdealState,\n  Spinner,\n} from \"@blueprintjs/core\";\nimport { Controller } from \"./Controller\";\n\nenum ConnectionState {\n  Connected,\n  Connecting,\n  Disconnected,\n  Disconnecting,\n}\n\ninterface IAppState {\n  connectionState: ConnectionState;\n  characteristic: BluetoothRemoteGATTCharacteristic | null;\n}\n\nconst SERVICE_UUID = \"0000ffe0-0000-1000-8000-00805f9b34fb\";\nconst CHARACTERISTIC_UUID = \"0000ffe1-0000-1000-8000-00805f9b34fb\";\n\nclass App extends Component<{}, IAppState> {\n  public readonly state: IAppState = {\n    connectionState: ConnectionState.Disconnected,\n    characteristic: null,\n  };\n\n  handleConnectClick = async () => {\n    try {\n      this.setState({ connectionState: ConnectionState.Connecting });\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [\n          {\n            name: \"Spherebot\",\n            services: [SERVICE_UUID],\n          },\n        ],\n      });\n      if (!device.gatt) {\n        return;\n      }\n      const server = await device.gatt.connect();\n      const service = await server.getPrimaryService(SERVICE_UUID);\n      const characteristic = await service.getCharacteristic(CHARACTERISTIC_UUID);\n      this.setState({\n        connectionState: ConnectionState.Connected,\n        characteristic,\n      });\n    } catch (err) {\n      console.log(\"Error: \", err);\n      this.setState({\n        connectionState: ConnectionState.Disconnected,\n        characteristic: null,\n      });\n    }\n  };\n\n  handleDisconnectClick = async () => {\n    try {\n      this.setState({\n        connectionState: ConnectionState.Disconnecting,\n      });\n      const characteristic = this.state.characteristic;\n      if (!characteristic) {\n        return;\n      }\n      const service = characteristic.service;\n      if (!service) {\n        return;\n      }\n      const gatt = service.device.gatt;\n      if (!gatt) {\n        return;\n      }\n      await gatt.disconnect();\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n    this.setState({\n      connectionState: ConnectionState.Disconnected,\n      characteristic: null,\n    });\n  };\n\n  renderConnectionButton() {\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <Button text=\"Connect\" intent={Intent.PRIMARY} onClick={this.handleConnectClick} />;\n      case ConnectionState.Connected:\n        return (\n          <Button text=\"Disconnect\" intent={Intent.WARNING} onClick={this.handleDisconnectClick} />\n        );\n      case ConnectionState.Disconnecting:\n        return <Button text=\"Disconnecting\" disabled />;\n      case ConnectionState.Connecting:\n        return <Button text=\"Connecting\" disabled />;\n    }\n  }\n\n  renderController() {\n    const characteristic = this.state.characteristic;\n    if (!characteristic) {\n      return <NonIdealState icon=\"offline\" title=\"Disconnected from Spherebot!\" />;\n    }\n    return <Controller characteristic={characteristic} />;\n  }\n\n  renderBody() {\n    return <Controller />;\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <NonIdealState icon=\"offline\" title=\"Please connect to Spherebot\" />;\n      case ConnectionState.Connecting | ConnectionState.Disconnecting:\n        return <NonIdealState className=\"main-spinner\" icon={<Spinner />} title=\"Loading...\" />;\n      case ConnectionState.Connected:\n        return this.renderController();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Navbar>\n          <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Spherebot</NavbarHeading>\n            <NavbarDivider />\n            {this.renderConnectionButton()}\n          </NavbarGroup>\n        </Navbar>\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./static/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}