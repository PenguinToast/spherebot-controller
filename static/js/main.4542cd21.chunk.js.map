{"version":3,"sources":["Controller.tsx","Joystick.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Motor","Joystick","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","divRef","createRef","canvasRef","currentTouch","redraw","canvas","current","ctx","getContext","width","height","clearRect","drawBackground","beginPath","arc","valueToY","props","value","radius","Math","PI","closePath","fillStyle","fill","stroke","handlePress","clientX","clientY","loc","windowToCanvas","onChange","yToValue","y","handleResize","div","sizeCanvas","setTimeout","handleMouseEvent","e","handleTouchStart","touch","changedTouches","item","identifier","handleTouchMove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","handleTouchEnd","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","inherits","createClass","key","x","w","h","r","moveTo","arcTo","roundRect","clientWidth","clientHeight","bbox","getBoundingClientRect","left","top","_this2","addEventListener","window","removeEventListener","react_default","a","createElement","resizeSensor","onResize","className","ref","Component","ConnectionState","Controller","_this$state","state","defineProperty","Left","Right","handleCenterClick","screenfull","enabled","toggle","motor","setState","Joystick_Joystick","getMotorHandler","buttons","icon","large","onClick","SERVICE_UUID","CHARACTERISTIC_UUID","App","connectionState","Disconnected","characteristic","handleConnectClick","_callee","device","server","service","_characteristic","regenerator_default","wrap","_context","prev","Connecting","navigator","bluetooth","requestDevice","filters","name","services","sent","gatt","abrupt","connect","getPrimaryService","getCharacteristic","Connected","t0","console","log","stop","handleDisconnectClick","_callee2","_characteristic2","_context2","Disconnecting","disconnect","text","intent","Intent","PRIMARY","WARNING","disabled","Controller_Controller","nonIdealState","title","navbar","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","renderConnectionButton","renderBody","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAWKA,mOCCQC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACUQ,OAASC,sBADnBhB,EAEUiB,UAAYD,sBAFtBhB,EAIUkB,aAA8B,KAJxClB,EAyDUmB,OAAS,WACf,IAAMC,EAASpB,EAAKiB,UAAUI,QAC9B,GAAKD,EAAL,CAGA,IAAME,EAAMF,EAAOG,WAAW,MACxBC,EAAQJ,EAAOI,MACfC,EAASL,EAAOK,OACtBH,EAAII,UAAU,EAAG,EAAGF,EAAOC,GAC3BzB,EAAK2B,eAAeL,EAAKE,EAAOC,GAGhCH,EAAIM,YACJN,EAAIO,IACFL,EAAQ,EACRxB,EAAK8B,SAASV,EAAQpB,EAAK+B,MAAMC,OACjChC,EAAKiC,OAAOb,GACZ,EACA,EAAIc,KAAKC,IAEXb,EAAIc,YACJd,EAAIe,UAAY,UAChBf,EAAIgB,OACJhB,EAAIiB,WAhFRvC,EA4FEwC,YAAc,SAACC,EAAiBC,GAC9B,IAAMtB,EAASpB,EAAKiB,UAAUI,QAC9B,GAAKD,EAAL,CAGA,IAAMuB,EAAM3C,EAAK4C,eAAexB,EAAQqB,EAASC,GACjD1C,EAAK+B,MAAMc,SAAS7C,EAAK8C,SAAS1B,EAAQuB,EAAII,MAlGlD/C,EAqGEgD,aAAe,WACb,IAAM5B,EAASpB,EAAKiB,UAAUI,QACxB4B,EAAMjD,EAAKe,OAAOM,QACnBD,GAAW6B,IAGhBjD,EAAKkD,WAAW9B,EAAQ6B,GACxBE,WAAWnD,EAAKmB,OAAQ,KA5G5BnB,EA+GEoD,iBAAmB,SAACC,GAClBrD,EAAKwC,YAAYa,EAAEZ,QAASY,EAAEX,UAhHlC1C,EAmHEsD,iBAAmB,SAACD,GAClB,IAAME,EAAQF,EAAEG,eAAeC,KAAK,GAC/BF,IAGLvD,EAAKkB,aAAeqC,EAAMG,WAC1B1D,EAAKwC,YAAYe,EAAMd,QAASc,EAAMb,WAzH1C1C,EA4HE2D,gBAAkB,SAACN,GAAkB,IAAAO,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACnC,QAAAC,EAAAC,EAAkBZ,EAAEG,eAApBU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAoC,KAA3BL,EAA2BS,EAAAhC,MAClC,GAAIuB,EAAMG,aAAe1D,EAAKkB,aAE5B,YADAlB,EAAKwC,YAAYe,EAAMd,QAASc,EAAMb,UAHP,MAAA4B,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,KA5HvC9D,EAqIEwE,eAAiB,SAACnB,GAAkB,IAAAoB,GAAA,EAAAC,GAAA,EAAAC,OAAAZ,EAAA,IAClC,QAAAa,EAAAC,EAAkBxB,EAAEG,eAApBU,OAAAC,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAAoC,CAClC,GADkCG,EAAA5C,MACxB0B,aAAe1D,EAAKkB,aAE5B,YADAlB,EAAKkB,aAAe,OAHU,MAAAoD,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,KArItC3E,EAAA,OAAAC,OAAA6E,EAAA,EAAA7E,CAAAJ,EAAAC,GAAAG,OAAA8E,EAAA,EAAA9E,CAAAJ,EAAA,EAAAmF,IAAA,YAAAhD,MAAA,SAOIV,EACA2D,EACAlC,EACAmC,EACAC,EACAC,GAWA,OATIF,EAAI,EAAIE,IAAGA,EAAIF,EAAI,GACnBC,EAAI,EAAIC,IAAGA,EAAID,EAAI,GACvB7D,EAAIM,YACJN,EAAI+D,OAAOJ,EAAIG,EAAGrC,GAClBzB,EAAIgE,MAAML,EAAIC,EAAGnC,EAAGkC,EAAIC,EAAGnC,EAAIoC,EAAGC,GAClC9D,EAAIgE,MAAML,EAAIC,EAAGnC,EAAIoC,EAAGF,EAAGlC,EAAIoC,EAAGC,GAClC9D,EAAIgE,MAAML,EAAGlC,EAAIoC,EAAGF,EAAGlC,EAAGqC,GAC1B9D,EAAIgE,MAAML,EAAGlC,EAAGkC,EAAIC,EAAGnC,EAAGqC,GAC1B9D,EAAIc,YACGd,IAvBX,CAAA0D,IAAA,iBAAAhD,MAAA,SA0ByBV,EAA+BE,EAAeC,GACnEH,EAAIe,UAAY,UAChBlC,KAAKoF,UAAUjE,EAAK,EAAG,EAAGE,EAAOC,EAAQD,EAAQ,GAAGc,OACpDnC,KAAKoF,UAAUjE,EAAK,EAAG,EAAGE,EAAOC,EAAQD,EAAQ,GAAGe,WA7BxD,CAAAyC,IAAA,aAAAhD,MAAA,SAgCqBZ,EAA2B6B,GAC5C7B,EAAOI,MAAQyB,EAAIuC,YACnBpE,EAAOK,OAASwB,EAAIwC,eAlCxB,CAAAT,IAAA,SAAAhD,MAAA,SAqCiBZ,GACb,OAAOA,EAAOI,MAAQ,EAAI,IAtC9B,CAAAwD,IAAA,WAAAhD,MAAA,SAyCmBZ,EAA2BY,GAC1C,IAAMP,EAASL,EAAOK,OACtB,OAAOA,EAAS,GAAKO,GAASP,EAAS,EAAItB,KAAK8B,OAAOb,MA3C3D,CAAA4D,IAAA,WAAAhD,MAAA,SA8CmBZ,EAA2B2B,GAC1C,IAAMtB,EAASL,EAAOK,OAChBO,GAASP,EAAS,EAAIsB,IAAMtB,EAAS,EAAItB,KAAK8B,OAAOb,IAC3D,OAAIY,EAAQ,EACH,EACEA,GAAS,GACV,EAEHA,IAtDX,CAAAgD,IAAA,iBAAAhD,MAAA,SAmFyBZ,EAA2B6D,EAAWlC,GAC3D,IAAM2C,EAAOtE,EAAOuE,wBAEpB,MAAO,CACLV,EAAGA,EAAIS,EAAKE,MAAQxE,EAAOI,MAAQkE,EAAKlE,OACxCuB,EAAGA,EAAI2C,EAAKG,KAAOzE,EAAOK,OAASiE,EAAKjE,WAxF9C,CAAAuD,IAAA,oBAAAhD,MAAA,WA8IsB,IAAA8D,EAAA3F,KACZiB,EAASjB,KAAKc,UAAUI,QACzBD,IAGLA,EAAO2E,iBAAiB,YAAa,SAAA1C,GACnCyC,EAAK1C,iBAAiBC,GACtB2C,OAAOD,iBAAiB,YAAaD,EAAK1C,kBAC1C4C,OAAOD,iBAAiB,UAAW,WACjCC,OAAOC,oBAAoB,YAAaH,EAAK1C,kBAC7C4C,OAAOC,oBAAoB,UAAWH,EAAK1C,sBAG/ChC,EAAO2E,iBAAiB,aAAc5F,KAAKmD,kBAC3ClC,EAAO2E,iBAAiB,YAAa5F,KAAKwD,iBAC1CvC,EAAO2E,iBAAiB,WAAY5F,KAAKqE,gBACzCrE,KAAK6C,kBA9JT,CAAAgC,IAAA,qBAAAhD,MAAA,WAkKI7B,KAAKgB,WAlKT,CAAA6D,IAAA,SAAAhD,MAAA,WAsKI,OACEkE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcC,SAAUnG,KAAK6C,cAC3BkD,EAAAC,EAAAC,cAAA,OAAKG,UAAWpG,KAAK4B,MAAMwE,UAAWC,IAAKrG,KAAKY,QAC9CmF,EAAAC,EAAAC,cAAA,UAAQI,IAAKrG,KAAKc,kBAzK5BpB,EAAA,CAA8B4G,uBDDzB7G,uDAUE,IENF8G,EFMQC,EAAb,SAAA7G,GAAA,SAAA6G,IAAA,IAAA5G,EAAA6G,EAAA5G,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwG,GAAA,QAAAvG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA0G,IAAA/F,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACkBsG,OADlBD,EAAA,GAAA3G,OAAA6G,EAAA,EAAA7G,CAAA2G,EAEKhH,EAAMmH,KAAO,GAFlB9G,OAAA6G,EAAA,EAAA7G,CAAA2G,EAGKhH,EAAMoH,MAAQ,GAHnBJ,GAAA5G,EAMUe,OAASC,sBANnBhB,EAYEiH,kBAAoB,WACdC,KAAcA,IAAWC,SAAWnH,EAAKe,OAAOM,SAClD6F,IAAWE,OAAOpH,EAAKe,OAAOM,UAdpCrB,EAAA,OAAAC,OAAA6E,EAAA,EAAA7E,CAAA0G,EAAA7G,GAAAG,OAAA8E,EAAA,EAAA9E,CAAA0G,EAAA,EAAA3B,IAAA,kBAAAhD,MAAA,SAQkBqF,GAAc,IAAAvB,EAAA3F,KAC5B,OAAO,SAAC6B,GAAD,OAAmB8D,EAAKwB,SAALrH,OAAA6G,EAAA,EAAA7G,CAAA,GAAiBoH,EAAQrF,OATvD,CAAAgD,IAAA,SAAAhD,MAAA,WAmBI,OACEkE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAaC,IAAKrG,KAAKY,QACpCmF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAACmB,EAAD,CACEhB,UAAU,SACVvE,MAAO7B,KAAK0G,MAAMjH,EAAMmH,MACxBlE,SAAU1C,KAAKqH,gBAAgB5H,EAAMmH,SAGzCb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yBACbL,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACElB,UAAU,cACVmB,KAAK,0BACLC,OAAK,EACLC,QAASzH,KAAK8G,qBAGlBf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAACmB,EAAD,CACEhB,UAAU,SACVvE,MAAO7B,KAAK0G,MAAMjH,EAAMoH,OACxBnE,SAAU1C,KAAKqH,gBAAgB5H,EAAMoH,eAxCjDL,EAAA,CAAgCF,uBEN3BC,mJAYL,IAAMmB,EAAe,uCACfC,EAAsB,uCAoHbC,6MAjHGlB,MAAmB,CACjCmB,gBAAiBtB,EAAgBuB,aACjCC,eAAgB,QAGlBC,wCAAqB,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAtC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAvE,MAAA,cAAAuE,EAAAC,KAAA,EAEjB5I,EAAKsH,SAAS,CAAEU,gBAAiBtB,EAAgBmC,aAFhCF,EAAAvE,KAAA,EAGI0E,UAAUC,UAAUC,cAAc,CACrDC,QAAS,CACP,CACEC,KAAM,YACNC,SAAU,CAACtB,OAPA,WAGXQ,EAHWM,EAAAS,MAWLC,KAXK,CAAAV,EAAAvE,KAAA,eAAAuE,EAAAW,OAAA,wBAAAX,EAAAvE,KAAA,EAcIiE,EAAOgB,KAAKE,UAdhB,cAcXjB,EAdWK,EAAAS,KAAAT,EAAAvE,KAAA,GAeKkE,EAAOkB,kBAAkB3B,GAf9B,eAeXU,EAfWI,EAAAS,KAAAT,EAAAvE,KAAA,GAgBYmE,EAAQkB,kBAAkB3B,GAhBtC,QAgBXI,EAhBWS,EAAAS,KAiBjBpJ,EAAKsH,SAAS,CACZU,gBAAiBtB,EAAgBgD,UACjCxB,mBAnBeS,EAAAvE,KAAA,iBAAAuE,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAsBjBiB,QAAQC,IAAI,UAAZlB,EAAAgB,IACA3J,EAAKsH,SAAS,CACZU,gBAAiBtB,EAAgBuB,aACjCC,eAAgB,OAzBD,yBAAAS,EAAAmB,SAAA1B,EAAAjI,KAAA,eA8BrB4J,2CAAwB,SAAAC,IAAA,IAAAC,EAAA1B,EAAAc,EAAA,OAAAZ,EAAAtC,EAAAuC,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAA9F,MAAA,UAAA8F,EAAAtB,KAAA,EAEpB5I,EAAKsH,SAAS,CACZU,gBAAiBtB,EAAgByD,gBAE7BjC,EAAiBlI,EAAK6G,MAAMqB,eALd,CAAAgC,EAAA9F,KAAA,eAAA8F,EAAAZ,OAAA,oBASdf,EAAUL,EAAeK,QATX,CAAA2B,EAAA9F,KAAA,eAAA8F,EAAAZ,OAAA,oBAadD,EAAOd,EAAQF,OAAOgB,KAbR,CAAAa,EAAA9F,KAAA,gBAAA8F,EAAAZ,OAAA,yBAAAY,EAAA9F,KAAA,GAiBdiF,EAAKe,aAjBS,QAAAF,EAAA9F,KAAA,iBAAA8F,EAAAtB,KAAA,GAAAsB,EAAAP,GAAAO,EAAA,SAmBpBN,QAAQC,IAAI,UAAZK,EAAAP,IAnBoB,QAqBtB3J,EAAKsH,SAAS,CACZU,gBAAiBtB,EAAgBuB,aACjCC,eAAgB,OAvBI,yBAAAgC,EAAAJ,SAAAE,EAAA7J,KAAA,qGA4BtB,OAAQA,KAAK0G,MAAMmB,iBACjB,KAAKtB,EAAgBuB,aACnB,OAAO/B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQ4C,KAAK,UAAUC,OAAQC,IAAOC,QAAS5C,QAASzH,KAAKgI,qBACtE,KAAKzB,EAAgBgD,UACnB,OACExD,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQ4C,KAAK,aAAaC,OAAQC,IAAOE,QAAS7C,QAASzH,KAAK4J,wBAEpE,KAAKrD,EAAgByD,cACnB,OAAOjE,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQ4C,KAAK,gBAAgBK,UAAQ,IAC9C,KAAKhE,EAAgBmC,WACnB,OAAO3C,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQ4C,KAAK,aAAaK,UAAQ,gDAK7C,IAAMxC,EAAiB/H,KAAK0G,MAAMqB,eAClC,OAAKA,EAGEhC,EAAAC,EAAAC,cAACuE,EAAD,CAAYzC,eAAgBA,IAF1BhC,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAelD,KAAK,UAAUmD,MAAM,sEAM7C,OAAO3E,EAAAC,EAAAC,cAACuE,EAAD,uCAYP,OACEzE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACE5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAaC,MAAOC,IAAUC,MAC5BhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,kBACAjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,MACCjL,KAAKkL,2BAGTlL,KAAKmL,qBA5GI7E,aClBE8E,QACW,cAA7BvF,OAAOwF,SAASC,UAEe,UAA7BzF,OAAOwF,SAASC,UAEhBzF,OAAOwF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBjD,WACrBA,UAAUkD,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4542cd21.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport \"./static/css/controller.css\";\nimport screenfull from \"screenfull\";\n\nimport { Button, Slider } from \"@blueprintjs/core\";\nimport { Joystick } from \"./Joystick\";\n\nexport interface IControllerProps {\n  characteristic?: BluetoothRemoteGATTCharacteristic;\n}\n\nenum Motor {\n  Left = 0,\n  Right = 1,\n}\n\ninterface IControllerState {\n  [Motor.Left]: number;\n  [Motor.Right]: number;\n}\n\nexport class Controller extends Component<IControllerProps, IControllerState> {\n  public readonly state: IControllerState = {\n    [Motor.Left]: 0,\n    [Motor.Right]: 0,\n  };\n\n  private divRef = createRef<HTMLDivElement>();\n\n  getMotorHandler(motor: Motor) {\n    return (value: number) => this.setState({ [motor]: value });\n  }\n\n  handleCenterClick = () => {\n    if (screenfull && screenfull.enabled && this.divRef.current) {\n      screenfull.toggle(this.divRef.current);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"controller\" ref={this.divRef}>\n        <div className=\"slider-container\">\n          <Joystick\n            className=\"slider\"\n            value={this.state[Motor.Left]}\n            onChange={this.getMotorHandler(Motor.Left)}\n          />\n        </div>\n        <div className=\"center-icon-container\">\n          <Button\n            className=\"center-icon\"\n            icon=\"horizontal-distribution\"\n            large\n            onClick={this.handleCenterClick}\n          />\n        </div>\n        <div className=\"slider-container\">\n          <Joystick\n            className=\"slider\"\n            value={this.state[Motor.Right]}\n            onChange={this.getMotorHandler(Motor.Right)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component, createRef } from \"react\";\n\nimport { ResizeSensor } from \"@blueprintjs/core\";\n\nexport interface IJoystickProps {\n  className?: string;\n  value: number;\n  onChange: (newValue: number) => void;\n}\n\nconst WIDTH = 30;\n\nexport class Joystick extends Component<IJoystickProps, {}> {\n  private divRef = createRef<HTMLDivElement>();\n  private canvasRef = createRef<HTMLCanvasElement>();\n\n  private currentTouch: number | null = null;\n\n  private roundRect(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    r: number\n  ) {\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + w, y, x + w, y + h, r);\n    ctx.arcTo(x + w, y + h, x, y + h, r);\n    ctx.arcTo(x, y + h, x, y, r);\n    ctx.arcTo(x, y, x + w, y, r);\n    ctx.closePath();\n    return ctx;\n  }\n\n  private drawBackground(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    ctx.fillStyle = \"#BFCCD6\";\n    this.roundRect(ctx, 0, 0, width, height, width / 2).fill();\n    this.roundRect(ctx, 0, 0, width, height, width / 2).stroke();\n  }\n\n  private sizeCanvas(canvas: HTMLCanvasElement, div: HTMLDivElement) {\n    canvas.width = div.clientWidth;\n    canvas.height = div.clientHeight;\n  }\n\n  private radius(canvas: HTMLCanvasElement): number {\n    return canvas.width / 2 - 1;\n  }\n\n  private valueToY(canvas: HTMLCanvasElement, value: number): number {\n    const height = canvas.height;\n    return height / 2 + -value * (height / 2 - this.radius(canvas));\n  }\n\n  private yToValue(canvas: HTMLCanvasElement, y: number): number {\n    const height = canvas.height;\n    const value = (height / 2 - y) / (height / 2 - this.radius(canvas));\n    if (value > 1) {\n      return 1;\n    } else if (value < -1) {\n      return -1;\n    }\n    return value;\n  }\n\n  private redraw = () => {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\")!;\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.clearRect(0, 0, width, height);\n    this.drawBackground(ctx, width, height);\n\n    // Draw slider\n    ctx.beginPath();\n    ctx.arc(\n      width / 2,\n      this.valueToY(canvas, this.props.value),\n      this.radius(canvas),\n      0,\n      2 * Math.PI\n    );\n    ctx.closePath();\n    ctx.fillStyle = \"#394B59\";\n    ctx.fill();\n    ctx.stroke();\n  };\n\n  private windowToCanvas(canvas: HTMLCanvasElement, x: number, y: number) {\n    const bbox = canvas.getBoundingClientRect();\n\n    return {\n      x: x - bbox.left * (canvas.width / bbox.width),\n      y: y - bbox.top * (canvas.height / bbox.height),\n    };\n  }\n\n  handlePress = (clientX: number, clientY: number) => {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const loc = this.windowToCanvas(canvas, clientX, clientY);\n    this.props.onChange(this.yToValue(canvas, loc.y));\n  };\n\n  handleResize = () => {\n    const canvas = this.canvasRef.current;\n    const div = this.divRef.current;\n    if (!canvas || !div) {\n      return;\n    }\n    this.sizeCanvas(canvas, div);\n    setTimeout(this.redraw, 1);\n  };\n\n  handleMouseEvent = (e: MouseEvent) => {\n    this.handlePress(e.clientX, e.clientY);\n  };\n\n  handleTouchStart = (e: TouchEvent) => {\n    const touch = e.changedTouches.item(0);\n    if (!touch) {\n      return;\n    }\n    this.currentTouch = touch.identifier;\n    this.handlePress(touch.clientX, touch.clientY);\n  };\n\n  handleTouchMove = (e: TouchEvent) => {\n    for (let touch of e.changedTouches) {\n      if (touch.identifier === this.currentTouch) {\n        this.handlePress(touch.clientX, touch.clientY);\n        return;\n      }\n    }\n  };\n\n  handleTouchEnd = (e: TouchEvent) => {\n    for (let touch of e.changedTouches) {\n      if (touch.identifier === this.currentTouch) {\n        this.currentTouch = null;\n        return;\n      }\n    }\n  };\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    canvas.addEventListener(\"mousedown\", e => {\n      this.handleMouseEvent(e);\n      window.addEventListener(\"mousemove\", this.handleMouseEvent);\n      window.addEventListener(\"mouseup\", () => {\n        window.removeEventListener(\"mousemove\", this.handleMouseEvent);\n        window.removeEventListener(\"mouseup\", this.handleMouseEvent);\n      });\n    });\n    canvas.addEventListener(\"touchstart\", this.handleTouchStart);\n    canvas.addEventListener(\"touchmove\", this.handleTouchMove);\n    canvas.addEventListener(\"touchend\", this.handleTouchEnd);\n    this.handleResize();\n  }\n\n  componentDidUpdate() {\n    this.redraw();\n  }\n\n  render() {\n    return (\n      <ResizeSensor onResize={this.handleResize}>\n        <div className={this.props.className} ref={this.divRef}>\n          <canvas ref={this.canvasRef} />\n        </div>\n      </ResizeSensor>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./static/css/app.css\";\nimport {\n  Alignment,\n  Button,\n  Intent,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  NonIdealState,\n  Spinner,\n} from \"@blueprintjs/core\";\nimport { Controller } from \"./Controller\";\n\nenum ConnectionState {\n  Connected,\n  Connecting,\n  Disconnected,\n  Disconnecting,\n}\n\ninterface IAppState {\n  connectionState: ConnectionState;\n  characteristic: BluetoothRemoteGATTCharacteristic | null;\n}\n\nconst SERVICE_UUID = \"0000ffe0-0000-1000-8000-00805f9b34fb\";\nconst CHARACTERISTIC_UUID = \"0000ffe1-0000-1000-8000-00805f9b34fb\";\n\nclass App extends Component<{}, IAppState> {\n  public readonly state: IAppState = {\n    connectionState: ConnectionState.Disconnected,\n    characteristic: null,\n  };\n\n  handleConnectClick = async () => {\n    try {\n      this.setState({ connectionState: ConnectionState.Connecting });\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [\n          {\n            name: \"Spherebot\",\n            services: [SERVICE_UUID],\n          },\n        ],\n      });\n      if (!device.gatt) {\n        return;\n      }\n      const server = await device.gatt.connect();\n      const service = await server.getPrimaryService(SERVICE_UUID);\n      const characteristic = await service.getCharacteristic(CHARACTERISTIC_UUID);\n      this.setState({\n        connectionState: ConnectionState.Connected,\n        characteristic,\n      });\n    } catch (err) {\n      console.log(\"Error: \", err);\n      this.setState({\n        connectionState: ConnectionState.Disconnected,\n        characteristic: null,\n      });\n    }\n  };\n\n  handleDisconnectClick = async () => {\n    try {\n      this.setState({\n        connectionState: ConnectionState.Disconnecting,\n      });\n      const characteristic = this.state.characteristic;\n      if (!characteristic) {\n        return;\n      }\n      const service = characteristic.service;\n      if (!service) {\n        return;\n      }\n      const gatt = service.device.gatt;\n      if (!gatt) {\n        return;\n      }\n      await gatt.disconnect();\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n    this.setState({\n      connectionState: ConnectionState.Disconnected,\n      characteristic: null,\n    });\n  };\n\n  renderConnectionButton() {\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <Button text=\"Connect\" intent={Intent.PRIMARY} onClick={this.handleConnectClick} />;\n      case ConnectionState.Connected:\n        return (\n          <Button text=\"Disconnect\" intent={Intent.WARNING} onClick={this.handleDisconnectClick} />\n        );\n      case ConnectionState.Disconnecting:\n        return <Button text=\"Disconnecting\" disabled />;\n      case ConnectionState.Connecting:\n        return <Button text=\"Connecting\" disabled />;\n    }\n  }\n\n  renderController() {\n    const characteristic = this.state.characteristic;\n    if (!characteristic) {\n      return <NonIdealState icon=\"offline\" title=\"Disconnected from Spherebot!\" />;\n    }\n    return <Controller characteristic={characteristic} />;\n  }\n\n  renderBody() {\n    return <Controller />;\n    switch (this.state.connectionState) {\n      case ConnectionState.Disconnected:\n        return <NonIdealState icon=\"offline\" title=\"Please connect to Spherebot\" />;\n      case ConnectionState.Connecting | ConnectionState.Disconnecting:\n        return <NonIdealState className=\"main-spinner\" icon={<Spinner />} title=\"Loading...\" />;\n      case ConnectionState.Connected:\n        return this.renderController();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Navbar>\n          <NavbarGroup align={Alignment.LEFT}>\n            <NavbarHeading>Spherebot</NavbarHeading>\n            <NavbarDivider />\n            {this.renderConnectionButton()}\n          </NavbarGroup>\n        </Navbar>\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./static/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}